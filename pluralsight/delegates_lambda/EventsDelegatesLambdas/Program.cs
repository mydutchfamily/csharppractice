using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EventsDelegatesLambdas
{
    public enum WorkType {
        GoToMeetings,
        Golf,
        GeneralReports
    }

    public delegate int WorkPerformedHandler(int hours, WorkType workType);
    public delegate void WorkPerformedHandler2(object sender, WorkPerformedEventArgs e);
    public delegate void WorkCompletedHandler(object sender, EventArgs e);
    public delegate int BizRuleDelegate(int x, int y);


    class Program
    {
        static void Main(string[] args)
        {
            BizRuleDelegate addDell = (x, y) => x + y;
            BizRuleDelegate subDell = (x, y) => x - y;

            var process = new ProcessData();
            process.Process(3, 8, addDell);

            WorkPerformedHandler del1 = new WorkPerformedHandler(WorkPerformed1);
            WorkPerformedHandler del2 = new WorkPerformedHandler(WorkPerformed2);
            WorkPerformedHandler del3 = new WorkPerformedHandler(WorkPerformed3);

            del1(4, WorkType.Golf);
            del2(10, WorkType.GeneralReports);
            DoWork(del1);

            del1 += del2 + del3;
            int finalHours = del1(4, WorkType.Golf);// last value returned
            Console.WriteLine(finalHours);

            var worker = new Worker();

            worker.WorkPerformed += new WorkPerformedHandler(WorkPerformed1);
            worker.WorkPerformed2 += (s, e) => Console.WriteLine("1 line lambda worked: " + e.Hours + " " + e.WorkType);
            worker.WorkPerformed2 += new WorkPerformedHandler2(Worker_WorkPerformed);
            worker.WorkPerformed3 += new EventHandler<WorkPerformedEventArgs>(Worker_WorkPerformed);
            worker.WorkPerformed3 += autogenerated_Worker_WorkPerformed;
            worker.WorkPerformed3 += delegate (object sender, WorkPerformedEventArgs e)
            {
                Console.WriteLine("Anonymouse worked: " + e.Hours + " " + e.WorkType);
            };

            worker.WorkCompleted += new WorkCompletedHandler(Worker_WorkComleted);
            worker.WorkCompleted2 += (s, e) =>
            {
                Console.WriteLine("1) two line lambda");
                Console.WriteLine("2) Worker_WorkComleted");
            };
            worker.WorkCompleted2 += new EventHandler(Worker_WorkComleted);
            worker.WorkCompleted2 += autogenerated_Worker_WorkComleted;

            worker.DoWork(8, WorkType.GeneralReports);
        }

        static void Worker_WorkPerformed(object sender, WorkPerformedEventArgs e)
        {
            Console.WriteLine("worked: " + e.Hours + " " + e.WorkType);
        }

        static void autogenerated_Worker_WorkPerformed(object sender, WorkPerformedEventArgs e)
        {
            Console.WriteLine("Autogenerated worked: " + e.Hours + " " + e.WorkType);
        }

        static void Worker_WorkComleted(object sender, EventArgs e)
        {
            Console.WriteLine("Worker_WorkComleted");
        }

        static void autogenerated_Worker_WorkComleted(object sender, EventArgs e)
        {
            Console.WriteLine("autogenerated_Worker_WorkComleted");
        }

        static void DoWork(WorkPerformedHandler del)
        {
            del(5, WorkType.GoToMeetings);
        }

        static int WorkPerformed1(int hours, WorkType workType)
        {
            Console.WriteLine($"WorkPerformed1 called {hours}");
            return hours + 1;
        }

        static int WorkPerformed2(int hours, WorkType workType)
        {
            Console.WriteLine($"WorkPerformed2 called {hours}");
            return hours + 2;
        }

        static int WorkPerformed3(int hours, WorkType workType)
        {
            Console.WriteLine($"WorkPerformed3 called {hours}");
            return hours + 3;
        }
    }
}
